// https://www.codewars.com/kata/5ef9ca8b76be6d001d5e1c3e

use std::{collections::HashMap, iter};

use itertools::Itertools;

fn main() {
    // println!("{:?}", encode("hey"));
    // println!("{:?}", decode(encode("hey").as_str()));

    assert_eq!(
        encode("hey"),
        "000111111000111000000000000111111000000111000111000111111111111000000111"
    );
    assert_eq!(
        encode("The Sensei told me that i can do this kata"),

    );
    assert_eq!(
        encode("T3st"),
        "000111000111000111000000000000111111000000111111000111111111000000111111000111111111000111000000"
    );
    assert_eq!(
        encode("T?st!%"),
        "000111000111000111000000000000111111111111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"
    );
    assert_eq!(
        decode("100111111000111001000010000111111000000111001111000111110110111000010111"),
        "hey"
    );
    assert_eq!(
        decode
        "The Sensei told me that i can do this kata"
    );
    assert_eq!(
        decode("000111000111000111000010000000111111000000111111000111111111000000111111000111111111000111010000"),
        "T3st"
    );
    assert_eq!(
        decode("000111000111000111000001000000111111110111111111000111111111000000111111000111111111000111000000000000111000000000000111000000111000000111000111"),
        "T?st!%"
    );
}

fn encode(text: &str) -> String {
    text.chars()
        .map(|c| c as u8)
        .flat_map(|ascii| format!("{ascii:08b}").chars().collect::<Vec<_>>())
        .flat_map(|bin| iter::repeat(bin).take(3))
        .collect::<String>()
}

fn decode(bits: &str) -> String {
    bits.chars()
        .chunks(3)
        .into_iter()
        .map(|grp| {
            // grp.into_iter().sorted().nth(1).unwrap() -> much easier!
            grp.into_iter()
                .fold(HashMap::new(), |mut map, c| {
                    *map.entry(c).or_insert(0u32) += 1;
                    map
                })
                .into_iter()
                .max_by_key(|(_, count)| *count)
                .unwrap()
                .0
        })
        .collect::<Vec<_>>()
        .chunks(8)
        .map(|bits| u8::from_str_radix(bits.iter().collect::<String>().as_str(), 2).unwrap())
        .map(|ascii| ascii as char)
        .join("")
}
